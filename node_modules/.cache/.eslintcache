[{"/Users/giliardi/Documents/Projetos/monitoramento-dcsc/src/index.tsx":"1","/Users/giliardi/Documents/Projetos/monitoramento-dcsc/src/reportWebVitals.ts":"2","/Users/giliardi/Documents/Projetos/monitoramento-dcsc/src/AppRoutes.tsx":"3","/Users/giliardi/Documents/Projetos/monitoramento-dcsc/src/Pages/Brusque.tsx":"4","/Users/giliardi/Documents/Projetos/monitoramento-dcsc/src/Pages/Home.tsx":"5","/Users/giliardi/Documents/Projetos/monitoramento-dcsc/src/Pages/Blumenau.tsx":"6"},{"size":364,"mtime":1697046905592,"results":"7","hashOfConfig":"8"},{"size":425,"mtime":1696856358888,"results":"9","hashOfConfig":"8"},{"size":843,"mtime":1697046941345,"results":"10","hashOfConfig":"8"},{"size":4781,"mtime":1697047055147,"results":"11","hashOfConfig":"8"},{"size":34516,"mtime":1697046388539,"results":"12","hashOfConfig":"8"},{"size":3882,"mtime":1697047250897,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"8kkpsv",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},"/Users/giliardi/Documents/Projetos/monitoramento-dcsc/src/index.tsx",[],[],"/Users/giliardi/Documents/Projetos/monitoramento-dcsc/src/reportWebVitals.ts",[],[],["37"],"/Users/giliardi/Documents/Projetos/monitoramento-dcsc/src/AppRoutes.tsx",["38"],[],"import {\n    BrowserRouter as Router,\n    Route,\n    Routes,\n    Navigate\n} from \"react-router-dom\"\nimport { Home } from \"./Pages/Home\"\nimport { Brusque } from \"./Pages/Brusque\"\nimport { Blumenau } from \"./Pages/Blumenau\"\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\n\nconst client = new ApolloClient({\n    uri: \"https://monitoramento.defesacivil.sc.gov.br/graphql\",\n    cache: new InMemoryCache(),\n});\n\nexport function AppRoutes() {\n    return (\n        <Router>\n            <ApolloProvider client={client}>\n                <Routes>\n                    <Route path=\"/\" element={<Home />} />\n                    <Route path=\"/Brusque\" element={<Brusque />} />\n                    <Route path=\"/Blumenau\" element={<Blumenau />} />\n                </Routes>\n            </ApolloProvider>\n        </Router>\n    )\n}","/Users/giliardi/Documents/Projetos/monitoramento-dcsc/src/Pages/Brusque.tsx",["39","40","41","42","43"],[],"import React, { useCallback, useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { gql, useQuery } from '@apollo/client';\nimport axios from 'axios';\nimport Chart from \"chart.js/auto\";\nimport { CategoryScale } from \"chart.js\";\nimport { Line } from \"react-chartjs-2\";\n\nChart.register(CategoryScale);\n\nenum TipoEstacao {\n    HIDRO = \"Hidro\",\n    METEO = \"Meteo\",\n    PLUVIO = \"Pluvio\",\n    BARRAGEM = \"Barragem\",\n}\n\ntype Estacao = {\n    nome?: string;\n    tipo?: TipoEstacao;\n    codigo?: string;\n    last_read?: string;\n    nivel_rio?: number;\n\n    nivel_rio_historico?: Array<{ t_stamp: string; nivel: number }>;\n\n    chuva_001h?: number;\n    chuva_003h?: number;\n    chuva_006h?: number;\n    chuva_012h?: number;\n    chuva_024h?: number;\n    chuva_048h?: number;\n    chuva_072h?: number;\n    chuva_096h?: number;\n    chuva_120h?: number;\n    chuva_144h?: number;\n    chuva_168h?: number;\n\n    temp_atual?: number;\n    temp_sens?: number;\n    umidade?: number;\n\n    vel_vento?: number;\n    dir_vento?: number;\n    pres_atmos?: number;\n\n    localizacao?: {\n        lat: number;\n        lng: number;\n    };\n\n    nivel_montante?: number;\n    nivel_jusante?: number;\n    porc_reservatorio?: number;\n    comp_abertas?: number;\n    comp_fechadas?: number;\n};\n\ntype Data = {\n    local: string,\n    labels: string[],\n    data: number[]\n}\n\n\nexport function Brusque() {\n    const [estacoes, setEstacao] = useState<Estacao[]>([])\n    const [labelsBrusque, setLabelsBrusque] = useState<string[]>([])\n    const [dataBrusque, setDataBrusque] = useState<number[]>([])\n\n\n    const GET_ESTACOES = gql`\n  query ListaEstacoes {\n    estacoes {\n      nome\n      codigo\n      tipo\n      last_read\n\n      localizacao {\n        lat\n        lng\n      }\n\n      nivel_rio\n      nivel_rio_historico {\n        t_stamp\n        nivel\n      }\n\n      chuva_001h\n      chuva_003h\n      chuva_006h\n      chuva_012h\n      chuva_024h\n      chuva_048h\n      chuva_072h\n      chuva_096h\n      chuva_120h\n      chuva_144h\n      chuva_168h\n\n      temp_atual\n      temp_sens\n      umidade\n      vel_vento\n      dir_vento\n      pres_atmos\n\n      nivel_montante\n      nivel_jusante\n      porc_reservatorio\n      comp_abertas\n      comp_fechadas\n    }\n  }\n`;\n\n    const updateEstacoes = (\n        (data: { estacoes: Estacao[] }) => {\n            setEstacao(data.estacoes)\n        }\n    );\n\n    useQuery(GET_ESTACOES, {\n        onError: () => { },\n        onCompleted: updateEstacoes,\n        fetchPolicy: \"network-only\",\n    });\n\n\n    useEffect(() => {\n        setTimeout(function () {\n            window.location.reload();\n        }, 300000);\n        if (estacoes.length > 0) {\n            const listLabel: string[] = []\n            const listData: number[] = []\n            const brusqueData = estacoes.filter((item) => item.nome == \"DCSC Brusque\")\n            brusqueData[0].nivel_rio_historico?.forEach((item) => {\n                const date = `${new Date(item.t_stamp).getDate() < 10 ? '0' + new Date(item.t_stamp).getDate() : new Date(item.t_stamp).getDate()}/${new Date(item.t_stamp).getMonth() < 10 ? '0' + new Date(item.t_stamp).getMonth() : new Date(item.t_stamp).getMonth()} - ${new Date(item.t_stamp).getHours() < 10 ? '0' + new Date(item.t_stamp).getHours() : new Date(item.t_stamp).getHours()}:${new Date(item.t_stamp).getMinutes() < 10 ? '0' + new Date(item.t_stamp).getMinutes() : new Date(item.t_stamp).getMinutes()}`\n                listLabel.push(date)\n                listData.push(item.nivel)\n            })\n            setLabelsBrusque(listLabel)\n            setDataBrusque(listData)\n        }\n    }, [estacoes])\n\n    return (\n        <div className=\"App\">\n\n            <Line\n                options={{\n                    scales: {\n                        y: {\n                            min: 0,\n                            max: 14,\n                            border: {\n                                display: false\n                            },\n                            grid: {\n                                color: function (context) {\n                                    if (context.tick.value === 6.0) {\n                                        return 'red';\n                                    }\n                                    return '#e5e5e5';\n                                },\n                            },\n                        }\n                    }\n                }}\n                data={{\n                    labels: labelsBrusque,\n                    datasets: [\n                        {\n                            data: dataBrusque,\n                            label: \"Nivel Brusque (Atualizado Ã  cada hora) - Fonte: Defesa Civil SC\"\n                        }\n                    ]\n                }} />\n        </div>\n    )\n}\n","/Users/giliardi/Documents/Projetos/monitoramento-dcsc/src/Pages/Home.tsx",["44","45","46","47","48"],[],"import React, { useCallback, useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { gql, useQuery } from '@apollo/client';\nimport axios from 'axios';\nimport Chart from \"chart.js/auto\";\nimport { CategoryScale } from \"chart.js\";\nimport { Line } from \"react-chartjs-2\";\n\nChart.register(CategoryScale);\n\nenum TipoEstacao {\n    HIDRO = \"Hidro\",\n    METEO = \"Meteo\",\n    PLUVIO = \"Pluvio\",\n    BARRAGEM = \"Barragem\",\n}\n\ntype Estacao = {\n    nome?: string;\n    tipo?: TipoEstacao;\n    codigo?: string;\n    last_read?: string;\n    nivel_rio?: number;\n\n    nivel_rio_historico?: Array<{ t_stamp: string; nivel: number }>;\n\n    chuva_001h?: number;\n    chuva_003h?: number;\n    chuva_006h?: number;\n    chuva_012h?: number;\n    chuva_024h?: number;\n    chuva_048h?: number;\n    chuva_072h?: number;\n    chuva_096h?: number;\n    chuva_120h?: number;\n    chuva_144h?: number;\n    chuva_168h?: number;\n\n    temp_atual?: number;\n    temp_sens?: number;\n    umidade?: number;\n\n    vel_vento?: number;\n    dir_vento?: number;\n    pres_atmos?: number;\n\n    localizacao?: {\n        lat: number;\n        lng: number;\n    };\n\n    nivel_montante?: number;\n    nivel_jusante?: number;\n    porc_reservatorio?: number;\n    comp_abertas?: number;\n    comp_fechadas?: number;\n};\n\ntype Data = {\n    local: string,\n    labels: string[],\n    data: number[]\n}\n\n\nexport function Home() {\n    const [estacoes, setEstacao] = useState<Estacao[]>([])\n    const [itajai, setItajai] = useState<Data[]>([])\n    const [labelsBrusque, setLabelsBrusque] = useState<string[]>([])\n    const [dataBrusque, setDataBrusque] = useState<number[]>([])\n    const [labelsBlumenau, setLabelsBlumenau] = useState<string[]>([])\n    const [dataBlumenau, setDataBlumenau] = useState<number[]>([])\n    const [isMobile, setIsMobile] = useState(false)\n\n    const handleResize = () => {\n        if (window.innerWidth < 1000) {\n            setIsMobile(true)\n        } else {\n            setIsMobile(false)\n        }\n    }\n\n    useEffect(() => {\n        window.addEventListener(\"resize\", handleResize)\n    }, [window])\n\n    async function getApiBlumenau() {\n        const listLabel: string[] = []\n        const listData: number[] = []\n        const response = await axios.get(\"https://api.itajai.sc.gov.br/enchente/rios-blumenau\", {})\n        response.data.niveis.forEach((item: { nivel: number, horaLeitura: string }) => {\n            const date = `${new Date(item.horaLeitura).getDate() < 10 ? '0' + new Date(item.horaLeitura).getDate() : new Date(item.horaLeitura).getDate()}/${new Date(item.horaLeitura).getMonth() < 10 ? '0' + new Date(item.horaLeitura).getMonth() : new Date(item.horaLeitura).getMonth()} - ${new Date(item.horaLeitura).getHours() < 10 ? '0' + new Date(item.horaLeitura).getHours() : new Date(item.horaLeitura).getHours()}:${new Date(item.horaLeitura).getMinutes() < 10 ? '0' + new Date(item.horaLeitura).getMinutes() : new Date(item.horaLeitura).getMinutes()}`\n            listLabel.push(date)\n            listData.push(item.nivel)\n        })\n        setLabelsBlumenau(listLabel)\n        setDataBlumenau(listData)\n    }\n\n    async function getApiItajaiDC02() {\n        const listLabel: string[] = []\n        const listData: number[] = []\n        const response = await axios.get(\"https://intranet2.itajai.sc.gov.br/defesa-civil/api/telemetria?dc=DC02\", {})\n        response.data.forEach((item: { rio: number, datahora: string }) => {\n            const date = `${new Date(item.datahora).getDate() < 10 ? '0' + new Date(item.datahora).getDate() : new Date(item.datahora).getDate()}/${new Date(item.datahora).getMonth() < 10 ? '0' + new Date(item.datahora).getMonth() : new Date(item.datahora).getMonth()} - ${new Date(item.datahora).getHours() < 10 ? '0' + new Date(item.datahora).getHours() : new Date(item.datahora).getHours()}:${new Date(item.datahora).getMinutes() < 10 ? '0' + new Date(item.datahora).getMinutes() : new Date(item.datahora).getMinutes()}`\n            listLabel.push(date)\n            listData.push(item.rio)\n        })\n        const data: Data = {\n            local: 'ItajaiDC02',\n            labels: listLabel,\n            data: listData\n        }\n\n        return data\n    }\n\n    async function getApiItajaiDC07() {\n        const listLabel: string[] = []\n        const listData: number[] = []\n        const response = await axios.get(\"https://intranet2.itajai.sc.gov.br/defesa-civil/api/telemetria?dc=DC07\", {})\n        response.data.forEach((item: { rio: number, datahora: string }) => {\n            const date = `${new Date(item.datahora).getDate() < 10 ? '0' + new Date(item.datahora).getDate() : new Date(item.datahora).getDate()}/${new Date(item.datahora).getMonth() < 10 ? '0' + new Date(item.datahora).getMonth() : new Date(item.datahora).getMonth()} - ${new Date(item.datahora).getHours() < 10 ? '0' + new Date(item.datahora).getHours() : new Date(item.datahora).getHours()}:${new Date(item.datahora).getMinutes() < 10 ? '0' + new Date(item.datahora).getMinutes() : new Date(item.datahora).getMinutes()}`\n            listLabel.push(date)\n            listData.push(item.rio)\n        })\n        const data: Data = {\n            local: 'ItajaiDC07',\n            labels: listLabel,\n            data: listData\n        }\n\n        return data\n    }\n\n    async function getApiItajaiDC03() {\n        const listLabel: string[] = []\n        const listData: number[] = []\n        const response = await axios.get(\"https://intranet2.itajai.sc.gov.br/defesa-civil/api/telemetria?dc=DC03\", {})\n        response.data.forEach((item: { rio: number, datahora: string }) => {\n            const date = `${new Date(item.datahora).getDate() < 10 ? '0' + new Date(item.datahora).getDate() : new Date(item.datahora).getDate()}/${new Date(item.datahora).getMonth() < 10 ? '0' + new Date(item.datahora).getMonth() : new Date(item.datahora).getMonth()} - ${new Date(item.datahora).getHours() < 10 ? '0' + new Date(item.datahora).getHours() : new Date(item.datahora).getHours()}:${new Date(item.datahora).getMinutes() < 10 ? '0' + new Date(item.datahora).getMinutes() : new Date(item.datahora).getMinutes()}`\n            listLabel.push(date)\n            listData.push(item.rio)\n        })\n        const data: Data = {\n            local: 'ItajaiDC03',\n            labels: listLabel,\n            data: listData\n        }\n\n        return data\n    }\n\n    async function getApiItajaiDC05() {\n        const listLabel: string[] = []\n        const listData: number[] = []\n        const response = await axios.get(\"https://intranet2.itajai.sc.gov.br/defesa-civil/api/telemetria?dc=DC05\", {})\n        response.data.forEach((item: { rio: number, datahora: string }) => {\n            const date = `${new Date(item.datahora).getDate() < 10 ? '0' + new Date(item.datahora).getDate() : new Date(item.datahora).getDate()}/${new Date(item.datahora).getMonth() < 10 ? '0' + new Date(item.datahora).getMonth() : new Date(item.datahora).getMonth()} - ${new Date(item.datahora).getHours() < 10 ? '0' + new Date(item.datahora).getHours() : new Date(item.datahora).getHours()}:${new Date(item.datahora).getMinutes() < 10 ? '0' + new Date(item.datahora).getMinutes() : new Date(item.datahora).getMinutes()}`\n            listLabel.push(date)\n            listData.push(item.rio)\n        })\n        const data: Data = {\n            local: 'ItajaiDC05',\n            labels: listLabel,\n            data: listData\n        }\n\n        return data\n    }\n\n    async function getApiItajaiDC06() {\n        const listLabel: string[] = []\n        const listData: number[] = []\n        const response = await axios.get(\"https://intranet2.itajai.sc.gov.br/defesa-civil/api/telemetria?dc=DC06\", {})\n        response.data.forEach((item: { rio: number, datahora: string }) => {\n            const date = `${new Date(item.datahora).getDate() < 10 ? '0' + new Date(item.datahora).getDate() : new Date(item.datahora).getDate()}/${new Date(item.datahora).getMonth() < 10 ? '0' + new Date(item.datahora).getMonth() : new Date(item.datahora).getMonth()} - ${new Date(item.datahora).getHours() < 10 ? '0' + new Date(item.datahora).getHours() : new Date(item.datahora).getHours()}:${new Date(item.datahora).getMinutes() < 10 ? '0' + new Date(item.datahora).getMinutes() : new Date(item.datahora).getMinutes()}`\n            listLabel.push(date)\n            listData.push(item.rio)\n        })\n        const data: Data = {\n            local: 'ItajaiDC06',\n            labels: listLabel,\n            data: listData\n        }\n\n        return data\n    }\n\n\n    async function getApiItajai() {\n        const dc02 = await getApiItajaiDC02()\n        const dc03 = await getApiItajaiDC03()\n        const dc05 = await getApiItajaiDC05()\n        const dc06 = await getApiItajaiDC06()\n        const dc07 = await getApiItajaiDC07()\n\n        setItajai([dc02, dc03, dc05, dc06, dc07])\n    }\n\n    const GET_ESTACOES = gql`\n  query ListaEstacoes {\n    estacoes {\n      nome\n      codigo\n      tipo\n      last_read\n\n      localizacao {\n        lat\n        lng\n      }\n\n      nivel_rio\n      nivel_rio_historico {\n        t_stamp\n        nivel\n      }\n\n      chuva_001h\n      chuva_003h\n      chuva_006h\n      chuva_012h\n      chuva_024h\n      chuva_048h\n      chuva_072h\n      chuva_096h\n      chuva_120h\n      chuva_144h\n      chuva_168h\n\n      temp_atual\n      temp_sens\n      umidade\n      vel_vento\n      dir_vento\n      pres_atmos\n\n      nivel_montante\n      nivel_jusante\n      porc_reservatorio\n      comp_abertas\n      comp_fechadas\n    }\n  }\n`;\n\n    const updateEstacoes = (\n        (data: { estacoes: Estacao[] }) => {\n            setEstacao(data.estacoes)\n        }\n    );\n\n    useQuery(GET_ESTACOES, {\n        onError: () => { },\n        onCompleted: updateEstacoes,\n        fetchPolicy: \"network-only\",\n    });\n\n\n    useEffect(() => {\n        setTimeout(function () {\n            window.location.reload();\n        }, 300000);\n        getApiBlumenau()\n        getApiItajai()\n        if (estacoes.length > 0) {\n            const listLabel: string[] = []\n            const listData: number[] = []\n            const brusqueData = estacoes.filter((item) => item.nome == \"DCSC Brusque\")\n            brusqueData[0].nivel_rio_historico?.forEach((item) => {\n                const date = `${new Date(item.t_stamp).getDate() < 10 ? '0' + new Date(item.t_stamp).getDate() : new Date(item.t_stamp).getDate()}/${new Date(item.t_stamp).getMonth() < 10 ? '0' + new Date(item.t_stamp).getMonth() : new Date(item.t_stamp).getMonth()} - ${new Date(item.t_stamp).getHours() < 10 ? '0' + new Date(item.t_stamp).getHours() : new Date(item.t_stamp).getHours()}:${new Date(item.t_stamp).getMinutes() < 10 ? '0' + new Date(item.t_stamp).getMinutes() : new Date(item.t_stamp).getMinutes()}`\n                listLabel.push(date)\n                listData.push(item.nivel)\n            })\n            setLabelsBrusque(listLabel)\n            setDataBrusque(listData)\n        }\n    }, [estacoes])\n\n    if (isMobile) {\n        return (\n            <div className=\"App\">\n\n                <Line\n                    style={{ border: '5px solid green', alignItems: 'center', justifyContent: 'center', padding: 10 }}\n                    options={{\n                        scales: {\n                            y: {\n                                min: 0,\n                                max: 14,\n                                border: {\n                                    display: false\n                                },\n                                grid: {\n                                    color: function (context) {\n                                        if (context.tick.value === 6.0) {\n                                            return 'red';\n                                        }\n                                        return '#e5e5e5';\n                                    },\n                                },\n                            }\n                        }\n                    }}\n                    data={{\n                        labels: labelsBrusque,\n                        datasets: [\n                            {\n                                data: dataBrusque,\n                                label: \"Nivel Brusque (Atualizado Ã  cada hora) - Fonte: Defesa Civil SC\"\n                            }\n                        ]\n                    }} />\n\n                <Line\n                    style={{ border: '5px solid blue', alignItems: 'center', justifyContent: 'center', padding: 10 }}\n                    options={{\n                        scales: {\n                            y: {\n                                min: 0,\n                                max: 14,\n                                border: {\n                                    display: false\n                                },\n                                grid: {\n                                    color: function (context) {\n                                        if (context.tick.value === 8.0) {\n                                            return 'red';\n                                        }\n                                        return '#e5e5e5';\n                                    },\n                                },\n                            }\n                        }\n                    }}\n                    data={{\n                        labels: labelsBlumenau,\n                        datasets: [\n                            {\n                                data: dataBlumenau,\n                                label: \"Nivel Rio ItajaÃ­-AÃ§u - Blumenau (Atualizado Ã  cada hora) - Fonte: AlertaBlu\"\n                            },\n                        ],\n                    }} />\n\n                {\n                    itajai.length > 0 &&\n                    <>\n\n                        <Line\n                            style={{ border: '5px solid #e5e5e5', alignItems: 'center', justifyContent: 'center', padding: 10 }}\n                            options={{\n                                scales: {\n                                    y: {\n                                        min: 0,\n                                        max: 5,\n                                        border: {\n                                            display: false\n                                        },\n                                        grid: {\n                                            color: function (context) {\n                                                if (context.tick.value === 3.5) {\n                                                    return 'red';\n                                                }\n                                                return '#e5e5e5';\n                                            },\n                                        },\n                                    }\n                                }\n                            }}\n                            data={{\n                                labels: itajai[0].labels,\n                                datasets: [\n                                    {\n                                        data: itajai[0].data,\n                                        label: \"Nivel Rio ItajaÃ­-AÃ§u - ItajaÃ­ (PraÃ§a Celso Pereira da Silva) (Atualizado Ã  cada 10 minutos )\"\n                                    },\n                                ],\n                            }} />\n\n                        <Line\n                            style={{ border: '5px solid #e5e5e5', alignItems: 'center', justifyContent: 'center', padding: 10 }}\n                            options={{\n                                scales: {\n                                    y: {\n                                        min: 0,\n                                        max: 5,\n                                        border: {\n                                            display: false\n                                        },\n                                        grid: {\n                                            color: function (context) {\n                                                if (context.tick.value === 2.5) {\n                                                    return 'red';\n                                                }\n                                                return '#e5e5e5';\n                                            },\n                                        },\n                                    }\n                                }\n                            }}\n                            data={{\n                                labels: itajai[1].labels,\n                                datasets: [\n                                    {\n                                        data: itajai[1].data,\n                                        label: \"Nivel Rio ItajaÃ­-Mirim - ItajaÃ­ (Atualizado Ã  cada 10 minutos ) - Fonte: CaptaÃ§Ã£o SEMASA\"\n                                    },\n                                ],\n                            }} />\n                        <Line\n                            style={{ border: '5px solid #e5e5e5', alignItems: 'center', justifyContent: 'center', padding: 10 }}\n                            options={{\n                                scales: {\n                                    y: {\n                                        min: 0,\n                                        max: 5,\n                                        border: {\n                                            display: false\n                                        },\n                                        grid: {\n                                            color: function (context) {\n                                                if (context.tick.value === 2.5) {\n                                                    return 'red';\n                                                }\n                                                return '#e5e5e5';\n                                            },\n                                        },\n                                    }\n                                }\n                            }}\n                            data={{\n                                labels: itajai[2].labels,\n                                datasets: [\n                                    {\n                                        data: itajai[2].data,\n                                        label: \"Nivel Rio ItajaÃ­-Mirim - ItajaÃ­ (Curso antigo - Propriedade Privada) (Atualizado Ã  cada 10 minutos ) - Fonte: Defesa CivÃ­l ItajaÃ­\"\n                                    },\n                                ],\n                            }} />\n                        <Line\n                            style={{ border: '5px solid #e5e5e5', alignItems: 'center', justifyContent: 'center', padding: 10 }}\n                            options={{\n                                scales: {\n                                    y: {\n                                        min: 0,\n                                        max: 10,\n                                        border: {\n                                            display: false\n                                        },\n                                        grid: {\n                                            color: function (context) {\n                                                if (context.tick.value === 1.25) {\n                                                    return 'red';\n                                                }\n                                                return '#e5e5e5';\n                                            },\n                                        },\n                                    }\n                                }\n                            }}\n                            data={{\n                                labels: itajai[3].labels,\n                                datasets: [\n                                    {\n                                        data: itajai[3].data,\n                                        label: \"Nivel Rio ItajaÃ­-Mirim - ItajaÃ­ (Itamirim Clube de Campo) (Atualizado Ã  cada 10 minutos )\"\n                                    },\n                                ],\n                            }} />\n                        <Line\n                            style={{ border: '5px solid #e5e5e5', alignItems: 'center', justifyContent: 'center', padding: 10 }}\n                            options={{\n                                scales: {\n                                    y: {\n                                        min: 0,\n                                        max: 5,\n                                        border: {\n                                            display: false\n                                        },\n                                        grid: {\n                                            color: function (context) {\n                                                if (context.tick.value === 2.5) {\n                                                    return 'red';\n                                                }\n                                                return '#e5e5e5';\n                                            },\n                                        },\n                                    }\n                                }\n                            }}\n                            data={{\n                                labels: itajai[3].labels,\n                                datasets: [\n                                    {\n                                        data: itajai[3].data,\n                                        label: \"Nivel RibeirÃ£o da Murta - ItajaÃ­ (Portal) (Atualizado Ã  cada 10 minutos ) - Fonte: Defesa CivÃ­l ItajaÃ­\"\n                                    },\n                                ],\n                            }} />\n                    </>\n                }\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"App\">\n            <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-around', width: '100%' }}>\n                <div style={{ display: 'flex', width: '49%', border: '5px solid green', alignItems: 'center', justifyContent: 'center', padding: 10 }}>\n                    <Line\n                        options={{\n                            scales: {\n                                y: {\n                                    min: 0,\n                                    max: 14,\n                                    border: {\n                                        display: false\n                                    },\n                                    grid: {\n                                        color: function (context) {\n                                            if (context.tick.value === 6.0) {\n                                                return 'red';\n                                            }\n                                            return '#e5e5e5';\n                                        },\n                                    },\n                                }\n                            }\n                        }}\n                        data={{\n                            labels: labelsBrusque,\n                            datasets: [\n                                {\n                                    data: dataBrusque,\n                                    label: \"Nivel Brusque (Atualizado Ã  cada hora) - Fonte: Defesa Civil SC\"\n                                }\n                            ]\n                        }} />\n                </div>\n                <div style={{ display: 'flex', width: '49%', border: '5px solid blue', alignItems: 'center', justifyContent: 'center', padding: 10 }}>\n                    <Line\n                        options={{\n                            scales: {\n                                y: {\n                                    min: 0,\n                                    max: 14,\n                                    border: {\n                                        display: false\n                                    },\n                                    grid: {\n                                        color: function (context) {\n                                            if (context.tick.value === 8.0) {\n                                                return 'red';\n                                            }\n                                            return '#e5e5e5';\n                                        },\n                                    },\n                                }\n                            }\n                        }}\n                        data={{\n                            labels: labelsBlumenau,\n                            datasets: [\n                                {\n                                    data: dataBlumenau,\n                                    label: \"Nivel Rio ItajaÃ­-AÃ§u - Blumenau (Atualizado Ã  cada hora) - Fonte: AlertaBlu\"\n                                },\n                            ],\n                        }} />\n                </div>\n            </div>\n            {\n                itajai.length > 0 &&\n                <>\n                    <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-around', width: '100%' }}>\n                        <div style={{ display: 'flex', width: '49%', border: '5px solid #e5e5e5', alignItems: 'center', justifyContent: 'center', padding: 10 }}>\n                            <Line\n                                options={{\n                                    scales: {\n                                        y: {\n                                            min: 0,\n                                            max: 5,\n                                            border: {\n                                                display: false\n                                            },\n                                            grid: {\n                                                color: function (context) {\n                                                    if (context.tick.value === 3.5) {\n                                                        return 'red';\n                                                    }\n                                                    return '#e5e5e5';\n                                                },\n                                            },\n                                        }\n                                    }\n                                }}\n                                data={{\n                                    labels: itajai[0].labels,\n                                    datasets: [\n                                        {\n                                            data: itajai[0].data,\n                                            label: \"Nivel Rio ItajaÃ­-AÃ§u - ItajaÃ­ (PraÃ§a Celso Pereira da Silva) (Atualizado Ã  cada 10 minutos )\"\n                                        },\n                                    ],\n                                }} />\n                        </div>\n                        <div style={{ display: 'flex', width: '49%', border: '5px solid #e5e5e5', alignItems: 'center', justifyContent: 'center', padding: 10 }}>\n                            <Line\n                                options={{\n                                    scales: {\n                                        y: {\n                                            min: 0,\n                                            max: 5,\n                                            border: {\n                                                display: false\n                                            },\n                                            grid: {\n                                                color: function (context) {\n                                                    if (context.tick.value === 2.5) {\n                                                        return 'red';\n                                                    }\n                                                    return '#e5e5e5';\n                                                },\n                                            },\n                                        }\n                                    }\n                                }}\n                                data={{\n                                    labels: itajai[1].labels,\n                                    datasets: [\n                                        {\n                                            data: itajai[1].data,\n                                            label: \"Nivel Rio ItajaÃ­-Mirim - ItajaÃ­ (Atualizado Ã  cada 10 minutos ) - Fonte: CaptaÃ§Ã£o SEMASA\"\n                                        },\n                                    ],\n                                }} />\n                        </div>\n                    </div>\n                    <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-around', width: '100%' }}>\n                        <div style={{ display: 'flex', width: '49%', border: '5px solid #e5e5e5', alignItems: 'center', justifyContent: 'center', padding: 10 }}>\n                            <Line\n                                options={{\n                                    scales: {\n                                        y: {\n                                            min: 0,\n                                            max: 5,\n                                            border: {\n                                                display: false\n                                            },\n                                            grid: {\n                                                color: function (context) {\n                                                    if (context.tick.value === 2.5) {\n                                                        return 'red';\n                                                    }\n                                                    return '#e5e5e5';\n                                                },\n                                            },\n                                        }\n                                    }\n                                }}\n                                data={{\n                                    labels: itajai[2].labels,\n                                    datasets: [\n                                        {\n                                            data: itajai[2].data,\n                                            label: \"Nivel Rio ItajaÃ­-Mirim - ItajaÃ­ (Curso antigo - Propriedade Privada) (Atualizado Ã  cada 10 minutos ) - Fonte: Defesa CivÃ­l ItajaÃ­\"\n                                        },\n                                    ],\n                                }} />\n                        </div>\n                        <div style={{ display: 'flex', width: '49%', border: '5px solid #e5e5e5', alignItems: 'center', justifyContent: 'center', padding: 10 }}>\n                            <Line\n                                options={{\n                                    scales: {\n                                        y: {\n                                            min: 0,\n                                            max: 5,\n                                            border: {\n                                                display: false\n                                            },\n                                            grid: {\n\n                                                color: function (context) {\n                                                    if (context.tick.value === 1.5) {\n\n                                                        return 'red';\n                                                    }\n                                                    return '#e5e5e5';\n                                                },\n                                            },\n                                        }\n                                    }\n                                }}\n                                data={{\n                                    labels: itajai[3].labels,\n                                    datasets: [\n                                        {\n                                            data: itajai[3].data,\n                                            label: \"Nivel Rio ItajaÃ­-Mirim - ItajaÃ­ (Itamirim Clube de Campo) (Atualizado Ã  cada 10 minutos )\"\n                                        },\n                                    ],\n                                }} />\n                        </div>\n                    </div>\n                    <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-around', width: '100%' }}>\n                        <div style={{ display: 'flex', width: '100%', border: '5px solid #e5e5e5', alignItems: 'center', justifyContent: 'center', padding: 10 }}>\n                            <Line\n                                options={{\n                                    scales: {\n                                        y: {\n                                            min: 0,\n                                            max: 5,\n                                            border: {\n                                                display: false\n                                            },\n                                            grid: {\n                                                color: function (context) {\n                                                    if (context.tick.value === 2.5) {\n                                                        return 'red';\n                                                    }\n                                                    return '#e5e5e5';\n                                                },\n                                            },\n                                        }\n                                    }\n                                }}\n                                data={{\n                                    labels: itajai[3].labels,\n                                    datasets: [\n                                        {\n                                            data: itajai[3].data,\n                                            label: \"Nivel RibeirÃ£o da Murta - ItajaÃ­ (Portal) (Atualizado Ã  cada 10 minutos ) - Fonte: Defesa CivÃ­l ItajaÃ­\"\n                                        },\n                                    ],\n                                }} />\n                        </div>\n                    </div>\n                </>\n            }\n        </div>\n    );\n}\n","/Users/giliardi/Documents/Projetos/monitoramento-dcsc/src/Pages/Blumenau.tsx",["49","50","51","52","53","54"],[],"import React, { useCallback, useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { gql, useQuery } from '@apollo/client';\nimport axios from 'axios';\nimport Chart from \"chart.js/auto\";\nimport { CategoryScale } from \"chart.js\";\nimport { Line } from \"react-chartjs-2\";\n\nChart.register(CategoryScale);\n\nenum TipoEstacao {\n    HIDRO = \"Hidro\",\n    METEO = \"Meteo\",\n    PLUVIO = \"Pluvio\",\n    BARRAGEM = \"Barragem\",\n}\n\ntype Estacao = {\n    nome?: string;\n    tipo?: TipoEstacao;\n    codigo?: string;\n    last_read?: string;\n    nivel_rio?: number;\n\n    nivel_rio_historico?: Array<{ t_stamp: string; nivel: number }>;\n\n    chuva_001h?: number;\n    chuva_003h?: number;\n    chuva_006h?: number;\n    chuva_012h?: number;\n    chuva_024h?: number;\n    chuva_048h?: number;\n    chuva_072h?: number;\n    chuva_096h?: number;\n    chuva_120h?: number;\n    chuva_144h?: number;\n    chuva_168h?: number;\n\n    temp_atual?: number;\n    temp_sens?: number;\n    umidade?: number;\n\n    vel_vento?: number;\n    dir_vento?: number;\n    pres_atmos?: number;\n\n    localizacao?: {\n        lat: number;\n        lng: number;\n    };\n\n    nivel_montante?: number;\n    nivel_jusante?: number;\n    porc_reservatorio?: number;\n    comp_abertas?: number;\n    comp_fechadas?: number;\n};\n\ntype Data = {\n    local: string,\n    labels: string[],\n    data: number[]\n}\n\n\nexport function Blumenau() {\n    const [labelsBlumenau, setLabelsBlumenau] = useState<string[]>([])\n    const [dataBlumenau, setDataBlumenau] = useState<number[]>([])\n\n    async function getApiBlumenau() {\n        const listLabel: string[] = []\n        const listData: number[] = []\n        const response = await axios.get(\"https://api.itajai.sc.gov.br/enchente/rios-blumenau\", {})\n        response.data.niveis.forEach((item: { nivel: number, horaLeitura: string }) => {\n            const date = `${new Date(item.horaLeitura).getDate() < 10 ? '0' + new Date(item.horaLeitura).getDate() : new Date(item.horaLeitura).getDate()}/${new Date(item.horaLeitura).getMonth() < 10 ? '0' + new Date(item.horaLeitura).getMonth() : new Date(item.horaLeitura).getMonth()} - ${new Date(item.horaLeitura).getHours() < 10 ? '0' + new Date(item.horaLeitura).getHours() : new Date(item.horaLeitura).getHours()}:${new Date(item.horaLeitura).getMinutes() < 10 ? '0' + new Date(item.horaLeitura).getMinutes() : new Date(item.horaLeitura).getMinutes()}`\n            listLabel.push(date)\n            listData.push(item.nivel)\n        })\n        setLabelsBlumenau(listLabel)\n        setDataBlumenau(listData)\n    }\n\n    useEffect(() => {\n        setTimeout(function () {\n            window.location.reload();\n        }, 300000);\n        getApiBlumenau()\n    }, [])\n\n    return (\n        <div className='App'>\n            <Line\n                options={{\n                    scales: {\n                        y: {\n                            min: 0,\n                            max: 14,\n                            border: {\n                                display: false\n                            },\n                            grid: {\n                                color: function (context) {\n                                    if (context.tick.value === 8.0) {\n                                        return 'red';\n                                    }\n                                    return '#e5e5e5';\n                                },\n                            },\n                        }\n                    }\n                }}\n                data={{\n                    labels: labelsBlumenau,\n                    datasets: [\n                        {\n                            data: dataBlumenau,\n                            label: \"Nivel Rio ItajaÃ­-AÃ§u - Blumenau (Atualizado Ã  cada hora) - Fonte: AlertaBlu\"\n                        },\n                    ],\n                }} />\n        </div>\n    )\n}\n\n",{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":5,"column":5,"nodeType":"59","messageId":"60","endLine":5,"endColumn":13},{"ruleId":"57","severity":1,"message":"61","line":1,"column":17,"nodeType":"59","messageId":"60","endLine":1,"endColumn":28},{"ruleId":"57","severity":1,"message":"62","line":2,"column":8,"nodeType":"59","messageId":"60","endLine":2,"endColumn":12},{"ruleId":"57","severity":1,"message":"63","line":5,"column":8,"nodeType":"59","messageId":"60","endLine":5,"endColumn":13},{"ruleId":"57","severity":1,"message":"64","line":60,"column":6,"nodeType":"59","messageId":"60","endLine":60,"endColumn":10},{"ruleId":"65","severity":1,"message":"66","line":140,"column":69,"nodeType":"67","messageId":"68","endLine":140,"endColumn":71},{"ruleId":"57","severity":1,"message":"61","line":1,"column":17,"nodeType":"59","messageId":"60","endLine":1,"endColumn":28},{"ruleId":"57","severity":1,"message":"62","line":2,"column":8,"nodeType":"59","messageId":"60","endLine":2,"endColumn":12},{"ruleId":"69","severity":1,"message":"70","line":86,"column":8,"nodeType":"71","endLine":86,"endColumn":16,"suggestions":"72"},{"ruleId":"65","severity":1,"message":"66","line":271,"column":69,"nodeType":"67","messageId":"68","endLine":271,"endColumn":71},{"ruleId":"69","severity":1,"message":"73","line":280,"column":8,"nodeType":"71","endLine":280,"endColumn":18,"suggestions":"74"},{"ruleId":"57","severity":1,"message":"61","line":1,"column":17,"nodeType":"59","messageId":"60","endLine":1,"endColumn":28},{"ruleId":"57","severity":1,"message":"62","line":2,"column":8,"nodeType":"59","messageId":"60","endLine":2,"endColumn":12},{"ruleId":"57","severity":1,"message":"75","line":4,"column":10,"nodeType":"59","messageId":"60","endLine":4,"endColumn":13},{"ruleId":"57","severity":1,"message":"76","line":4,"column":15,"nodeType":"59","messageId":"60","endLine":4,"endColumn":23},{"ruleId":"57","severity":1,"message":"77","line":19,"column":6,"nodeType":"59","messageId":"60","endLine":19,"endColumn":13},{"ruleId":"57","severity":1,"message":"64","line":60,"column":6,"nodeType":"59","messageId":"60","endLine":60,"endColumn":10},"no-new-object",["78"],"@typescript-eslint/no-unused-vars","'Navigate' is defined but never used.","Identifier","unusedVar","'useCallback' is defined but never used.","'logo' is defined but never used.","'axios' is defined but never used.","'Data' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has an unnecessary dependency: 'window'. Either exclude it or remove the dependency array. Outer scope values like 'window' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["79"],"React Hook useEffect has a missing dependency: 'getApiItajai'. Either include it or remove the dependency array.",["80"],"'gql' is defined but never used.","'useQuery' is defined but never used.","'Estacao' is defined but never used.","no-object-constructor",{"desc":"81","fix":"82"},{"desc":"83","fix":"84"},"Update the dependencies array to be: []",{"range":"85","text":"86"},"Update the dependencies array to be: [estacoes, getApiItajai]",{"range":"87","text":"88"},[2088,2096],"[]",[10894,10904],"[estacoes, getApiItajai]"]