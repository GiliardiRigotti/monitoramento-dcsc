{"ast":null,"code":"var _jsxFileName = \"/home/gti/Documentos/monitoramento/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { gql, useQuery } from '@apollo/client';\nimport axios from 'axios';\nimport Chart from \"chart.js/auto\";\nimport { CategoryScale } from \"chart.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(CategoryScale);\nexport let TipoEstacao = /*#__PURE__*/function (TipoEstacao) {\n  TipoEstacao[\"HIDRO\"] = \"Hidro\";\n  TipoEstacao[\"METEO\"] = \"Meteo\";\n  TipoEstacao[\"PLUVIO\"] = \"Pluvio\";\n  TipoEstacao[\"BARRAGEM\"] = \"Barragem\";\n  return TipoEstacao;\n}({});\nfunction App() {\n  _s();\n  const [estacoes, setEstacao] = useState([]);\n  async function getDataBlumenau() {\n    const mathRandom = Math.ceil(Math.random() * 9999999);\n    //const response = await apiBlumenau.get(\"/static/data/nivel_oficial.json?a=7192054\",{headers:{\n    //  'Access-Control-Allow-Origin' : '*',\n    //  'Access-Control-Allow-Methods':'GET,PUT,POST,DELETE,PATCH,OPTIONS',\n    //}})\n\n    const response = await axios.get(`https://alertablu.blumenau.sc.gov.br/static/data/nivel_oficial.json?a=${mathRandom}`, {\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET,PUT,POST,DELETE,PATCH,OPTIONS'\n      }\n    });\n    console.log(response.data);\n\n    //const response = await fetch(\"https://alertablu.blumenau.sc.gov.br/static/data/nivel_oficial.json\")\n    //console.log(response)\n  }\n\n  const GET_ESTACOES = gql`\n  query ListaEstacoes {\n    estacoes {\n      nome\n      codigo\n      tipo\n      last_read\n\n      localizacao {\n        lat\n        lng\n      }\n\n      nivel_rio\n      nivel_rio_historico {\n        t_stamp\n        nivel\n      }\n\n      chuva_001h\n      chuva_003h\n      chuva_006h\n      chuva_012h\n      chuva_024h\n      chuva_048h\n      chuva_072h\n      chuva_096h\n      chuva_120h\n      chuva_144h\n      chuva_168h\n\n      temp_atual\n      temp_sens\n      umidade\n      vel_vento\n      dir_vento\n      pres_atmos\n\n      nivel_montante\n      nivel_jusante\n      porc_reservatorio\n      comp_abertas\n      comp_fechadas\n    }\n  }\n`;\n  const updateEstacoes = data => setEstacao(data.estacoes);\n  useQuery(GET_ESTACOES, {\n    onError: () => {},\n    onCompleted: updateEstacoes,\n    fetchPolicy: \"cache-and-network\",\n    pollInterval: 15000\n  });\n  useEffect(() => {\n    if (estacoes.length > 0) {\n      estacoes.forEach(item => {\n        var _item$nivel_rio_histo;\n        (_item$nivel_rio_histo = item.nivel_rio_historico) === null || _item$nivel_rio_histo === void 0 ? void 0 : _item$nivel_rio_histo.forEach(item => {\n          console.log(\"Data: \", new Date(item.t_stamp).getDate());\n          console.log(\"Nivel: \", item.nivel);\n        });\n      });\n    }\n  }, [estacoes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"xQUVaC6zbS6KqcXWSc+h8lMCgQk=\", false, function () {\n  return [useQuery];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","gql","useQuery","axios","Chart","CategoryScale","jsxDEV","_jsxDEV","register","TipoEstacao","App","_s","estacoes","setEstacao","getDataBlumenau","mathRandom","Math","ceil","random","response","get","headers","console","log","data","GET_ESTACOES","updateEstacoes","onError","onCompleted","fetchPolicy","pollInterval","length","forEach","item","_item$nivel_rio_histo","nivel_rio_historico","Date","t_stamp","getDate","nivel","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/gti/Documentos/monitoramento/src/App.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { gql, useQuery } from '@apollo/client';\nimport axios from 'axios';\nimport { apiBlumenau } from './services/api';\nimport Chart from \"chart.js/auto\";\nimport { CategoryScale } from \"chart.js\";\nimport { Line } from \"react-chartjs-2\";\n\nChart.register(CategoryScale);\n\nexport enum TipoEstacao {\n  HIDRO = \"Hidro\",\n  METEO = \"Meteo\",\n  PLUVIO = \"Pluvio\",\n  BARRAGEM = \"Barragem\",\n}\n\nexport type Estacao = {\n  nome?: string;\n  tipo?: TipoEstacao;\n  codigo?: string;\n  last_read?: string;\n  nivel_rio?: number;\n\n  nivel_rio_historico?: Array<{ t_stamp: string; nivel: number }>;\n\n  chuva_001h?: number;\n  chuva_003h?: number;\n  chuva_006h?: number;\n  chuva_012h?: number;\n  chuva_024h?: number;\n  chuva_048h?: number;\n  chuva_072h?: number;\n  chuva_096h?: number;\n  chuva_120h?: number;\n  chuva_144h?: number;\n  chuva_168h?: number;\n\n  temp_atual?: number;\n  temp_sens?: number;\n  umidade?: number;\n\n  vel_vento?: number;\n  dir_vento?: number;\n  pres_atmos?: number;\n\n  localizacao?: {\n    lat: number;\n    lng: number;\n  };\n\n  nivel_montante?: number;\n  nivel_jusante?: number;\n  porc_reservatorio?: number;\n  comp_abertas?: number;\n  comp_fechadas?: number;\n};\n\nfunction App() {\n  const [estacoes, setEstacao] = useState<Estacao[]>([])\n\n  async function getDataBlumenau() {\n    const mathRandom = Math.ceil(Math.random() * 9999999)\n    //const response = await apiBlumenau.get(\"/static/data/nivel_oficial.json?a=7192054\",{headers:{\n    //  'Access-Control-Allow-Origin' : '*',\n    //  'Access-Control-Allow-Methods':'GET,PUT,POST,DELETE,PATCH,OPTIONS',\n    //}})\n    \n    const response = await axios.get(`https://alertablu.blumenau.sc.gov.br/static/data/nivel_oficial.json?a=${mathRandom}`,{headers:{\n      'Access-Control-Allow-Origin' : '*',\n      'Access-Control-Allow-Methods':'GET,PUT,POST,DELETE,PATCH,OPTIONS',\n    }\n  })\n    console.log(response.data)\n    \n    //const response = await fetch(\"https://alertablu.blumenau.sc.gov.br/static/data/nivel_oficial.json\")\n    //console.log(response)\n  }\n\n  const GET_ESTACOES = gql`\n  query ListaEstacoes {\n    estacoes {\n      nome\n      codigo\n      tipo\n      last_read\n\n      localizacao {\n        lat\n        lng\n      }\n\n      nivel_rio\n      nivel_rio_historico {\n        t_stamp\n        nivel\n      }\n\n      chuva_001h\n      chuva_003h\n      chuva_006h\n      chuva_012h\n      chuva_024h\n      chuva_048h\n      chuva_072h\n      chuva_096h\n      chuva_120h\n      chuva_144h\n      chuva_168h\n\n      temp_atual\n      temp_sens\n      umidade\n      vel_vento\n      dir_vento\n      pres_atmos\n\n      nivel_montante\n      nivel_jusante\n      porc_reservatorio\n      comp_abertas\n      comp_fechadas\n    }\n  }\n`;\n\n  const updateEstacoes = (\n    (data: { estacoes: Estacao[] }) => setEstacao(data.estacoes)\n  );\n\n  useQuery(GET_ESTACOES, {\n    onError: () => { },\n    onCompleted: updateEstacoes,\n    fetchPolicy: \"cache-and-network\",\n    pollInterval: 15000,\n  });\n\n\n\n  useEffect(() => {\n    if(estacoes.length > 0){\n      estacoes.forEach((item)=>{\n        item.nivel_rio_historico?.forEach((item)=>{\n          console.log(\"Data: \", new Date(item.t_stamp).getDate())\n          console.log(\"Nivel: \", item.nivel)\n        })\n      })\n    }\n  }, [estacoes])\n\n\n  return (\n    <div className=\"App\">\n      \n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAiBC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE/D,OAAO,WAAW;AAClB,SAASC,GAAG,EAAEC,QAAQ,QAAQ,gBAAgB;AAC9C,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAOC,KAAK,MAAM,eAAe;AACjC,SAASC,aAAa,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGzCH,KAAK,CAACI,QAAQ,CAACH,aAAa,CAAC;AAE7B,WAAYI,WAAW,0BAAXA,WAAW;EAAXA,WAAW;EAAXA,WAAW;EAAXA,WAAW;EAAXA,WAAW;EAAA,OAAXA,WAAW;AAAA;AAgDvB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAY,EAAE,CAAC;EAEtD,eAAec,eAAeA,CAAA,EAAG;IAC/B,MAAMC,UAAU,GAAGC,IAAI,CAACC,IAAI,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,OAAO,CAAC;IACrD;IACA;IACA;IACA;;IAEA,MAAMC,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,GAAG,CAAE,yEAAwEL,UAAW,EAAC,EAAC;MAACM,OAAO,EAAC;QAC9H,6BAA6B,EAAG,GAAG;QACnC,8BAA8B,EAAC;MACjC;IACF,CAAC,CAAC;IACAC,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAACK,IAAI,CAAC;;IAE1B;IACA;EACF;;EAEA,MAAMC,YAAY,GAAGxB,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;EAEC,MAAMyB,cAAc,GACjBF,IAA6B,IAAKX,UAAU,CAACW,IAAI,CAACZ,QAAQ,CAC5D;EAEDV,QAAQ,CAACuB,YAAY,EAAE;IACrBE,OAAO,EAAEA,CAAA,KAAM,CAAE,CAAC;IAClBC,WAAW,EAAEF,cAAc;IAC3BG,WAAW,EAAE,mBAAmB;IAChCC,YAAY,EAAE;EAChB,CAAC,CAAC;EAIF/B,SAAS,CAAC,MAAM;IACd,IAAGa,QAAQ,CAACmB,MAAM,GAAG,CAAC,EAAC;MACrBnB,QAAQ,CAACoB,OAAO,CAAEC,IAAI,IAAG;QAAA,IAAAC,qBAAA;QACvB,CAAAA,qBAAA,GAAAD,IAAI,CAACE,mBAAmB,cAAAD,qBAAA,uBAAxBA,qBAAA,CAA0BF,OAAO,CAAEC,IAAI,IAAG;UACxCX,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAE,IAAIa,IAAI,CAACH,IAAI,CAACI,OAAO,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC;UACvDhB,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEU,IAAI,CAACM,KAAK,CAAC;QACpC,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAAC3B,QAAQ,CAAC,CAAC;EAGd,oBACEL,OAAA;IAAKiC,SAAS,EAAC;EAAK;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEf,CAAC;AAEV;AAACjC,EAAA,CAlGQD,GAAG;EAAA,QAwEVR,QAAQ;AAAA;AAAA2C,EAAA,GAxEDnC,GAAG;AAoGZ,eAAeA,GAAG;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}